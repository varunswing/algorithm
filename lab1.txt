[ T(n) = T(n\2) + 1 ] Merge sort O(logn)
[ T(n) =  2.T(n\2) + n ] Quick sort O(nlogn)


Binary Search

int left = 0; int key
int right = n
int mid = (left + right)/2
while(left < right)
    if(key = arr(mid))
        return "value is found";
    if(key < mid)
        right = mid - 1;
    else
        left = mid;


Merge sort

merge(left1, right1, left2, right2, arr[]){
    size1 = right1 - leftl1 + 1; mid1 = (right1 + left1)/2
    size2 = rigth2 - left2 + 1; mid2 = (right2) + left2)/2
    if(size1 <= 1 && size2 <= 1) return;
    if(size2 <= 1)
        merge(left1, mid1, mid1+1, right1, arr)
    else if(size1 <= 1)
        merge(left2, mid2, mid2+1, right2, arr)
    else{
        merge(left1, mid1, mid1+1, right1, arr)
        merge(left1, mid1, mid1+1, right1, arr)
    }
}

new array n, size = 0;
int i=0, j=right2 - left1+1
while(i<j){
    if(arr[i] < arr[j])
        n[size] = arr[i]
        size++; i++;
    else
        n[size] = arr[i]
        size++; i++;
}
// Copy all element of array to the main array